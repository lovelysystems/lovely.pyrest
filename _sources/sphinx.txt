======================
Generate Documentation
======================

Lovely PyRest provides a sphinx extension to generate service documentation.
The generated documentation contains:

    - Service Description
    - HTTP-Method overview
    - Accept Header
    - Content-Type Header
    - Validators
    - GET-Parameters and JSON Body

Include the extension
=====================

To include the extension add the following line to the `config.py` in your
Spinx-Project::

    extensions = ['lovely.pyrest.sphinx']

If you have other extensions use::

    extensions.append('lovely.pyrest.sphinx')

Example
=======

Assume you have a Service with validators and a Schema:

.. literalinclude:: examples/sphinx.py

To automatically generate the documentation include the `service` directive
in your rst file like in this:

.. literalinclude:: examples/sphinx.rst

.. doctest::
    :hide:

    >>> import os
    >>> examples = os.path.join(os.path.dirname(__file__), 'examples')
    >>> path = os.path.join(examples, 'sphinx.rst')
    >>> out = render_doc(path)
    Running Sphinx v1.1.3
    loading pickled environment... not yet created
    building [html]: targets for 1 source files that are out of date
    ...

.. doctest::
    :hide:

    Check that the included html file equals the output:

    >>> with open(os.path.join(examples, 'sphinx_out.html')) as f:
    ...     f.read() == out
    True

This is the :download:`generated documentation <examples/sphinx_out.html>`.

Directives
==========

Lovely PyRest provides three directives to autogenerate the documentation.

Service Directive
-----------------

The Service directive renders all services defined in a module.
This modulde must be provided as argument::

    .. service:: myapp.service
    
Schema Directive
----------------

The Schema directive inserts only the information about GET-Parameter and JSON-Body
of a specific service. The Service Directive also provides this information.
This directive needs three arguments::

    .. schema::
        myapp.articles  # The module which contains the service
        article         # The service
        GET             # The HTTP method


Validators Directive
--------------------

Like the Schema Directive the Validatiors directive provides only information
about validation. This information is also included in the Service Directive.
This Directive has the same arguments as the Schema Directive::

    .. validators::
        myapp.articles  # The module which contains the service
        article         # The service
        GET             # The HTTP method
