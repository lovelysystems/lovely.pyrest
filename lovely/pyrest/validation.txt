==========
Validation
==========

For schema validation `validictory` gets used.
The `valid_schema` function validates the schema against a request object.
A `schema` is a validictory schema which should contain an `object` for the
`query` parameters or a schema for the json-body.


Validate Query
==============

Lets create a schema to validate the query parameters::

    >>> schema = {
    ...     "query": {
    ...         "type": "object",
    ...         "properties": {
    ...             "u": {
    ...                 "type": "string",
    ...                 "format": "url"
    ...             }
    ...         }
    ...     }
    ... }

Create a request object::

    >>> from pyramid.request import Request
    >>> from lovely.pyrest.errors import Errors
    >>> request = Request({})
    >>> request.errors = Errors()

Because the `request` doesn't have any GET parameters, validation
fails because the `u` object is required.
If validation fails an entry gets added to the requests error object::

    >>> from lovely.pyrest.validation import validate_schema
    >>> validate_schema(request, schema)
    >>> request.errors
    [{'location': 'query', 'description': "Required field 'u' is missing"}]

Add the required `GET` parameter::

    >>> request.errors = Errors()
    >>> request.GET['u'] = 'not-a-valid-url'
    >>> validate_schema(request, schema)
    >>> request.errors
    [{'location': 'query', 'description': "Value 'not-a-valid-url' of field 'u' is not an url"}]

Add the required `GET` parameter with a correct url::

    >>> request.errors = Errors()
    >>> request.GET['u'] = 'http://doesnotexist.com'
    >>> validate_schema(request, schema)
    >>> request.errors
    []

Schema type 'array' and query params
----------------------------------

The 'array' type can also be specified on GET query schemas. The value is
split by commas before validation, so the default array validation techniques
can be used::

    >>> schema = {
    ...     "query": {
    ...         "type": "object",
    ...         "properties": {
    ...             "x": {
    ...                 "type": "array",
    ...                 "items": {"enum": ["a", "b", "c"]}
    ...             }
    ...         }
    ...     }
    ... }

Use with only one param and without comma::

    >>> request = Request({})
    >>> request.errors = Errors()
    >>> request.GET['x'] = 'a'
    >>> validate_schema(request, schema)
    >>> request.errors
    []

Use multiple params, seperated with comma::

    >>> request.GET['x'] = 'a,b'
    >>> validate_schema(request, schema)
    >>> request.errors
    []

The parsed dictionary with the list value is set on the request object::

    >>> request.params_dict
    {'x': ['a', 'b']}

Using a value that is not allowed returns the default error::

    >>> request.GET['x'] = 'a,b,x'
    >>> validate_schema(request, schema)
    >>> request.errors
    [{'location': 'query', 'description': "Failed to validate field 'x' list schema: Value 'x' for list item is not in the enumeration: ['a', 'b', 'c']"}]


Validate JSON Body
==================

Create a schema for json body::

    >>> schema = {
    ...     "body": {
    ...         "type": "object",
    ...         "properties": {
    ...             "name": {
    ...                 "type": "string",
    ...             }
    ...         }
    ...     }
    ... }

    >>> import json
    >>> request = create_request()
    >>> request.body = json.dumps({'name':'rudolf'})
    >>> validate_schema(request, schema)
    >>> request.errors
    []

    >>> request = create_request()
    >>> request.body = json.dumps({})
    >>> validate_schema(request, schema)
    >>> request.errors
    [{'location': 'body', 'description': "Required field 'name' is missing"}]

The body schema could also contain a list instead of an object::

    >>> schema = {
    ...     "body": {
    ...         "type": "array",
    ...         "items": [
    ...             {"type": "string"}
    ...         ]
    ...     }
    ... }

    >>> request = create_request()
    >>> request.body = json.dumps(['rudolf'])
    >>> validate_schema(request, schema)
    >>> request.errors
    []

    >>> request = create_request()
    >>> request.body = json.dumps([])
    >>> validate_schema(request, schema)
    >>> pprint(request.errors)
    [{'description': "Length of list [] for field '_data' is not equal to length of schema list",
      'location': 'body'}]
