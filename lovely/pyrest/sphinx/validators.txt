.. Shared Source Software
   Copyright (c) 2013, Lovely Systems GmbH

==============================
Validators Directive Unit Test
==============================

Create a service with validators::

    >>> from lovely.pyrest.service import Service
    >>> def validator1(request):
    ...     """ The first validator """

    >>> def validator2(request):
    ...     """ Validates something """
    >>> service = Service('service', '/service')
    >>> @service.get(validators=[validator1, validator2])
    ... def get(request):
    ...     return {'success': True}

The `ValidatorsDirective` returns a section which contains the
docstrings of the service validators::

    >>> from lovely.pyrest.sphinx.validators import ValidatorsDirective
    >>> out = ValidatorsDirective.render(service, 'GET', 'unique_id')
    >>> print render_doc_node(out)
    <document source="<string>">
        <section ids="service_unique_id_GET_validators">
            <title>
                Validation:
                <paragraph>
                    The first validator
                <paragraph>
                    Validates something

If none of the validators contains a docstring an empty node gets returned::

    >>> def validator(request):
    ...     pass
    >>> service = Service('service', '/service')
    >>> @service.get(validators=[validator])
    ... def get(request):
    ...     return {'success': True}
    >>> out = ValidatorsDirective.render(service, 'GET', 'unique_id')
    >>> print render_doc_node(out)
    <document source="<string>">
        <inline>

If the service doesn't have any validators als an empty node gets returned::

    >>> service = Service('service', '/service')
    >>> @service.get()
    ... def get(request):
    ...     return {'success': True}
    >>> out = ValidatorsDirective.render(service, 'GET', 'unique_id')
    >>> print render_doc_node(out)
    <document source="<string>">
        <inline>

If the method is not implemented or the service is none, also an empty node
gets returned::

    >>> out = ValidatorsDirective.render(service, 'POST', 'unique_id')
    >>> print render_doc_node(out)
    <document source="<string>">
        <inline>

    >>> out = ValidatorsDirective.render(None, 'POST', 'unique_id')
    >>> print render_doc_node(out)
    <document source="<string>">
        <inline>
