===========================
Service Directive Unit Test
===========================

Create a service::

    >>> from lovely.pyrest.rest import RestService, rpcmethod_route
    >>> from lovely.pyrest.validation import validate
    >>> schema = {
    ...    "type": "object",
    ...    "properties": {
    ...        "u": {
    ...            "type": "string",
    ...        }
    ...    }
    ... }
    >>> class HelloService(object):
    ...     """ Description of the Service """
    ...     
    ...     @rpcmethod_route(request_method='POST',
    ...                      content_type='application/json')
    ...     @validate(schema)
    ...     def sample(self, data):
    ...         """Updates a sample
    ...
    ...         The update modifies the sample.
    ...         """
    ...
    ...     @rpcmethod_route(accept='application/json', route_suffix='/{id}')
    ...     def get(self, id, data):
    ...         pass

    >>> class stubmodule:
    ...     __name__ = "stubmodule"
    ...     __path__ = "stubmodule"
    ...     Service = HelloService
    ...
    ...     @staticmethod
    ...     def includeme(config):
    ...         config.add_route('base', '/base', static=True)

    >>> import sys
    >>> sys.modules['stubmodule'] = stubmodule

    >>> frame = sys._getframe(0)
    >>> frame.f_globals['__name__'] = 'stubmodule'
    >>> frame.f_locals['__module__'] = 'stubmodule'

    >>> from lovely.pyrest.rest import RestService
    >>> _ = RestService('base')(HelloService)

    >>> from pyramid.urldispatch import Route
    >>> class RouteMapper():
    ...     route = Route('base', '/base')
    ...     def get_route(self, name):
    ...         return self.route


    >>> def with_package(self, module):
    ...     return self

    >>> from pyramid.config import Configurator
    >>> Configurator.with_package = with_package

The `ServiceDirective` renders a service documentation including:

    - Description
    - Content-Type header
    - Accept header
    - Schema

    >>> from lovely.pyrest.sphinx.service import ServiceDirective
    >>> directive = ServiceDirective('service', ["stubmodule"], {}, None, None, None, None, None, None)

Patch the serialno function, because there are no settings in test environment::

    >>> def serialno_patch(ident):
    ...     return 0
    >>> directive.serialno = serialno_patch

    >>> def pyramid_conf():
    ...     return None
    >>> directive.pyramid_conf = pyramid_conf

Render the documentation::

    >>> out = directive.run()
    >>> print render_doc_node(out[0])
    <document source="<string>">
        <section ids="service_0">
            <title>
                base service
            <paragraph>
                Description of the Service
            <section ids="service_0_GET">
                <title>
                    GET - /base/{id}
                <literal_block xml:space="preserve">
                    GET - /base/{id}
                <paragraph>
                    Accept: application/json
            <section ids="service_0_POST">
                <title>
                    Updates a sample
                <literal_block xml:space="preserve">
                    POST - /base
                <paragraph>
                    The update modifies the sample.
                <paragraph>
                    Content-Type: application/json
                <section ids="service_0_POST_validator">
                    <title>
                        Validation Schema
                    <literal_block xml:space="preserve">
                        {
                            "type": "object",
                            "properties": {
                                "u": {
                                    "type": "string"
                                }
                            }
                        }

If the module is used in multiple sphinx directives the service and his methods
get registered again.
Render again to ensure that the methods don't get rendered twice on second
run::

    >>> out = directive.run()
    >>> print render_doc_node(out[0])
    <document source="<string>">
        <section ids="service_0">
            <title>
                base service
            <paragraph>
                Description of the Service
            <section ids="service_0_GET">
                <title>
                    GET - /base/{id}
                <literal_block xml:space="preserve">
                    GET - /base/{id}
                <paragraph>
                    Accept: application/json
            <section ids="service_0_POST">
                <title>
                    Updates a sample
                <literal_block xml:space="preserve">
                    POST - /base
                <paragraph>
                    The update modifies the sample.
                <paragraph>
                    Content-Type: application/json
                <section ids="service_0_POST_validator">
                    <title>
                        Validation Schema
                    <literal_block xml:space="preserve">
                        {
                            "type": "object",
                            "properties": {
                                "u": {
                                    "type": "string"
                                }
                            }
                        }

Convert to List
===============

Converts a comma separated string into a list::

    >>> from lovely.pyrest.sphinx.service import convert_to_list
    >>> convert_to_list(None)
    []

    >>> convert_to_list('  a   , b   ')
    ['a', 'b']

    >>> convert_to_list('a,b,,')
    ['a', 'b', '', '']
