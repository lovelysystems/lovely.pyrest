==================
Service Definition
==================

The lovely.pyrest.itests.service_definition module contains two service definitions.
So create a pyramid app which scans the module::

    >>> from webtest import TestApp
    >>> from pyramid import testing
    >>> config = testing.setUp()
    >>> config.include('lovely.pyrest')
    >>> config.scan('lovely.pyrest.itests.service_definition')
    >>> app = TestApp(config.make_wsgi_app())

Perform a get on the service::

    >>> res = app.get('/service')
    >>> print res.status
    200 OK

    >>> print_json(res.body)
    {
        "test": "succeed"
    }

Because only `GET` is implemented, a 405 gets returned when performing a
`POST` request::

    >>> app.post('/service')
    Traceback (most recent call last):
    HTTPMethodNotAllowed: ...

Predicates
==========

The `user` service returns an error response if the `Accept-Header` does not
match when performing a `GET` request::

    >>> from lovely.pyrest.views import JSONError
    >>> try:
    ...     app.get('/user', headers={'Accept': 'text/html'})
    ... except JSONError, e:
    ...     error = e

    >>> print error.status
    406 Not Acceptable

    >>> pprint(error.json_body)
    {u'errors': [{u'description': u"Accept header should be one of ['application/json']",
                  u'location': u'header'}],
     u'status': u'error'}

The `users` service has also defined a `content_type` predicate.
So a `415` gets returned if the `Acccept` header matches, but the content_type doesn't::

    >>> try:
    ...     app.get('/user', headers={'Accept': 'application/*'})
    ... except JSONError, e:
    ...     pass

    >>> print e.status
    415 Unsupported Media Type

    >>> pprint(e.json_body)
    {u'errors': [{u'description': u"Content-Type header should be one of ['application/json']",
                  u'location': u'header'}],
     u'status': u'error'}

If both predicates match a success resposne get returned::

    >>> headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
    >>> res = app.get('/user', headers=headers)
    >>> print res.status
    200 OK

    >>> pprint(res.body)
    '{"test": "succeed"}'


Validation
==========

The `users` service validates the json body and the query parameters::

    >>> res = app.post('/user', expect_errors=True)

    >>> print res.status
    400 Bad Request

    >>> print_json(res.body)
    {
        "errors": [
            {
                "description": "Required field 'u' is missing",
                "location": "query"
            },
            {
                "description": "No JSON object could be decoded",
                "location": "body"
            }
        ],
        "status": "error"
    }

Let's add the required GET-Parameter and a wrong body::

    >>> res = app.post_json('/user?u=http://google.com',
    ...                {},
    ...                expect_errors=True)
    >>> print res.status
    400 Bad Request

    >>> print_json(res.body)
    {
        "errors": [
            {
                "description": "Required field 'name' is missing",
                "location": "body"
            }
        ],
        "status": "error"
    }

Add the required body and a success response gets returned::

    >>> res = app.post_json('/user?u=http://test', {'name':'peter'})
    >>> print res.status
    200 OK

    >>> print_json(res.body)
    {
        "post_test": "succeeded"
    }
