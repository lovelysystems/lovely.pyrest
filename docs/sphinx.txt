======================
Generate Documentation
======================

Lovely PyRest provides a sphinx extension to generate service documentation.
The generated documentation contains:

    - Service Description
    - HTTP-Method overview
    - Accept Header
    - Content-Type Header
    - Schema

Include the extension
=====================

To include the extension add the following line to the `config.py` in your
Spinx-Project::

    extensions = ['lovely.pyrest.sphinx']

If you have other extensions use::

    extensions.append('lovely.pyrest.sphinx')

If you don't want to specify the module when using the sphinx directive add::

   pyramid_conf = <path-to-app-conf> 

Example
=======

Assume you have a Service with a Schema:

.. literalinclude:: examples/sphinx.py

To automatically generate the documentation include the `service` directive
in your rst file like in this:

.. literalinclude:: examples/sphinx.rst

.. doctest::
    :hide:

    >>> import os
    >>> examples = os.path.join(os.path.dirname(__file__), 'examples')
    >>> path = os.path.join(examples, 'sphinx.rst')
    >>> out = render_doc(path)
    Running Sphinx v1.1.3
    loading pickled environment... not yet created
    building [html]: targets for 1 source files that are out of date
    ...

.. doctest::
    :hide:

    Check that the included html file equals the output:


    >>> with open(os.path.join(examples, 'sphinx_out.html')) as f:
    ...     f.read() == out
    True

This is the :download:`generated documentation <examples/sphinx_out.html>`.

Directives
==========

Lovely PyRest provides three directives to autogenerate the documentation.

Service Directive
-----------------

The Service directive renders all services defined in a module.
This modulde must be provided as argument::

    .. service:: myapp.service

If the `pyramid_conf` option is set in the sphinx config file (conf.py) it's
possible to ommit the module::

    .. service::

It's also possible to specify base url of the service if you don't want to render
all services::

    .. service::
        :services: article

Or::

    .. service::
        myapp.service
        :services: article
