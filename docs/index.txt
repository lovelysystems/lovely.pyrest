.. Shared Source Software
   Copyright (c) 2013, Lovely Systems GmbH

===========================
Lovely PyRest Documentation
===========================

Lovely Pyrest provides helpers to build REST-Webservices with pyramid.

Features
========

    - raise a 405 if an unimplemented method is called on a servie
    - provides schema validation using validictory
    - raises correct errors if the `Accept` or `Content-Type` header doesn't match
    - sphinx extension to automatically generate service documentation


First Example
=============

This is an example of a full WSGI application using `lovely.pyrest`:

.. literalinclude:: examples/first_example.py

.. doctest::
    :hide:

    >>> app = get_app('testing.examples.first_example')


The example provides the following functionallity:

Error responses
---------------

Automatically raises a 405 if any method, except POST and GET is used on `/article/{id}`::

    >>> res = app.delete('/article/1', expect_errors=True)
    >>> print res.status
    405 Method Not Allowed

    >>> print_json(res.body)
    {
        "errors": [
            {
                "description": "The method DELETE is not allowed for this resource",
                "location": "method"
            }
        ],
        "status": "error"
    }

Schema Validation
-----------------

The request body gets validated if a post request gets performed and a json
error message gets returned if validation fails::

    >>> res = app.post_json('/article/1', {'content': 'This is my...'}, expect_errors=True)

    >>> print res.status
    400 Bad Request

    >>> print_json(res.body)
    {
        "errors": [
            {
                "description": "Required field 'title' is missing",
                "location": "body"
            }
        ],
        "status": "error"
    }

Custom Validator
----------------

The `get` method uses a custom validator to check if the given article exists.
If the validation fails also a json error response gets returned::

    >>> res = app.get('/article/1', expect_errors=True)
    >>> print res.status
    404 Not Found

    >>> print_json(res.body)
    {
        "errors": [
            {
                "description": "Article with id 1 does not exist",
                "location": "uri"
            }
        ],
        "status": "error"
    }


Index
=====

.. toctree::
   :maxdepth: 2
   :titlesonly:

   setup.txt
   service.txt
   validation.txt
   sphinx.txt
   jsonp.txt
